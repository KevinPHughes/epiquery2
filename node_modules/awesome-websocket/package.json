{
  "name": "awesome-websocket",
  "scripts": {},
  "version": "0.0.25",
  "description": "A WebSocket, with the extra awesome of client failover and autoreconnect",
  "keywords": [
    "WebSocket",
    "reconnect",
    "reconnecting",
    "queueing",
    "failover",
    "resend"
  ],
  "author": {
    "name": "Ian Groff"
  },
  "main": "index.js",
  "contributors": [
    {
      "name": "Ian Groff",
      "url": "https://github.com/igroff"
    },
    {
      "name": "Ryan Fairchild",
      "url": "https://github.com/unscene"
    },
    {
      "name": "David Hayes",
      "url": "https://drhayes.io"
    },
    {
      "name": "Will Ballard",
      "url": "https://github.com/wballard"
    },
    {
      "name": "Nick Swarr",
      "url": "https://github.com/nswarr"
    }
  ],
  "license": "ISC",
  "repository": {
    "type": "git",
    "url": "https://github.com/glg/awesome-websocket.git"
  },
  "dependencies": {
    "browserify": "^5.12.0",
    "coffee-script": "^1.7.1",
    "coffeeify": "0.6.0",
    "lodash": "^2.4.1",
    "simplog": "0.1.0"
  },
  "browserify": {
    "transform": [
      "coffeeify"
    ]
  },
  "devDependencies": {
    "supervisor": "^0.6.0"
  },
  "readme": "\n\n# WebSocket Additions\n## Home of the AwesomeWebSocket\n\n### What is this thing?\n\n##### concise\n\nWebSockets should do some stuff out of the box that they don't, this package\nattempts to add that stuff.\n\n##### blowhard\nIt appears useful to add some basic functionality to the native WebSocket.  At\nthe very least, it appears as if people find themselves coding the same basic\nfunctionality around the native WebSocket as we convert applications to be more\nWebSocket centric.  This package intends to be a source of some of that common\nfunctionality bundled up for re-use, to avoid having people need to do the same\nthings over and over.\n\n\n### What is this functionality you're speaking of?\n\n* Reconnecting - in the event of the server going down intentionally or otherwise\nit's good to have the socket just pickup as if the server were never gone.\n* Hunting - given a list of hosts, connect to them and send messages to which\never one is available, switching to another if the 'active' connection becomes\nunavailable.  Dumb-as-dirt client side fail over.\n* KeepAlive - You've gotta have your server do some work for this one, but\nit will allow you to set up a message that will be periodically sent back to\nthe server (to which the server should respond) to keep your connection up\nand healthy.\n* Sending Objects - really, if you send an object you'd probably just like\nit to get JSON serialized... so... that's what these do.\n\n### You sure it works?\n\nWhile the only place this currently has been tested is in Chrome and Safari \n(newish versions), there are some QUnit tests available to prove it does\n(or doesn't) work.\n\n```bash\ngit clone https://github.com/glg/awesome-websocket.git\ncd awesome-websocket/\nmake watch\n```\n\nOnce you've done that successfully you should find a test pages at \n  * `http://localhost:8080/hunting.html`\n  * `http://localhost:8080/reconnecting.html`\n  * `http://localhost:8080/keepalive.html`\n\nA bunch of these tests blow up the server ( by design ) so it's hard to get them\nall to run at the same time ( hence the multiple pages ).\n\n### Usage!\nThis package makes an object that looks a fair bit like a WebSocket available \nto you. \n\n#### What's a ReconnectingWebSocket look like?\n\n```\n[Constructor(DOMString url)]\ninterface ReconnectingWebSocket : EventTarget {\n  attribute WebSocket underlyingWs;\n\n  // networking\n          attribute EventHandler onopen;\n          attribute EventHandler onerror;\n          attribute EventHandler onclose;\n  // ondisconnect is a convenience that is intended for testing, but in the \n  // spirit of transparency...\n          attribute EventHandler ondisconnect;\n  void close([Clamp] optional unsigned short code, optional DOMString reason);\n\n  // messaging\n          attribute EventHandler onmessage;\n  void send(DOMString data);\n  void send(Blob data);\n  void send(ArrayBuffer data);\n  void send(ArrayBufferView data);\n\n  void keepAlive(int timeoutMs, DOMString message)\n  void keepAlive(int timeoutMs, Object message)\n```\n\n#### What's a AwesomeWebSocket look like?\n\n```\n[Constructor([DOMString url] | DOMString url)]\ninterface AwesomeWebSocket : EventTarget {\n  attribute WebSocket currSocket;\n\n  // networking\n          attribute EventHandler onopen;\n          attribute EventHandler onerror;\n          attribute EventHandler onclose;\n  void close();\n\n  // messaging\n          attribute EventHandler onmessage;\n  void send(DOMString data);\n  void send(Blob data);\n  void send(ArrayBuffer data);\n  void send(ArrayBufferView data);\n\n  void keepAlive(int timeoutMs, DOMString message)\n  void keepAlive(int timeoutMs, Object message)\n```\n\nFirst of all, you'll to get the sucker into a format usable by your browser.\n'round here we like browserify.\n\n```bash\n\nnpm install awesome-websocket\nnode_modules/.bin/browserify -r awesome-websocket > www/js/awesome-websocket.js \n```\n\n:shit: If you really want to, the most recent browserified version of this\nthing is down there in the repository at  `test/www/js/awesome-websocket.js`\n\nThen in an HTML page somewhere above js/awesome-websocket.js\n\nYou can, for whatever strange reason, use the ReconnectingWebSocket that underlies\nAwesomeWebSocket ( AwesomeWebSocket is way more awesome tho ).\n\n```html\n<script src=\"js/awesome-websocket.js\"></script>\n<script>\n  require(\"awesome-websocket\");\n  var ws = new ReconnectingWebSocket(\"ws://localhost:8080/socket\");\n  // now ws will reconnect in the event that the server busts, the only problem\n  // is that you may lose any messages not sent to the server\n</script>\n```\n\nWith that, your `ws` will handle reconnecting for you in the event that the \nserver at `ws://localhost:8080/socket` disappears.\n\nFor awesome, the only real difference is that you need to provide a list of\nservers to connect to, if any of them choose to vanish... it'll handle that for\nyou.\n\n```html\n<script src=\"js/awesome-websocket.js\"></script>\n<script>\n    require(\"awesome-websocket\");\n    var testWs = new AwesomeWebSocket([\n      \"ws://localhost:8085/socket\",\n      \"ws://localhost:8086/socket\"\n    ]);\n    testWs.send(\"this message is AWESOME!\");\n    testWs.send({thisIs: \"an object\"}); // YAY!\n</script>\n```\n\nBut, maybe you only have one server or already do load balancing for your servers. \nIn that case, just give it a single url as a string.\n\n```html\n<script src=\"js/awesome-websocket.js\"></script>\n<script>\n    require(\"awesome-websocket\").AwesomeWebSocket;\n    var testWs = new AwesomeWebSocket(\"ws://localhost:8085/socket\");\n    testWs.send(\"this message is AWESOME!\");\n    testWs.send({thisIs: \"an object\"}); // YAY!\n</script>\n```\n\nProxies have fun with Websockets.  Nginx in particular has a great default that will\nkill the connection if it is idle for too long. So you can opt to have these websockets\nsend pings to your server every so often. It works the same way for each of the\naforementioned sockets, you call keepAlive passing an interval (in ms) and a message\nthat your server will respond to.\n\n```html\n<script src=\"js/awesome-websocket.js\"></script>\n<script>\n  var aws = require(\"awesome-websocket\").AwesomeWebSocket;\n  var ws = new aws.AwesomeWebSocket(\"ws://localhost:8080/socket\")\n  ws.onopen = function() {\n    // this sets up the keep alive\n    ws.keepAlive(60 * 1000, \"ping!\");\n  }\n\n</script>\n```\n\nYou may have noticed the examples using a 'bare' require. This is an option because\nAwesomeWebsocket assumes you're gonna use it in a browser, and will add itself\n( and it's helper ReconnectingWebSocket ) to your window object for you.  This is\nassuming that you dont already have window.AwesomeWebSocket or window.ReconnectingWebSocket\ndefined. If you do have either of those values defined on window, it won't overwrite \nthem and you can access them directly from the module reference as in the final example for\nkeepalive (above).\n",
  "readmeFilename": "README.md",
  "gitHead": "83ef92fe446d366f311c7b65ca4b26867b6fb611",
  "bugs": {
    "url": "https://github.com/glg/awesome-websocket/issues"
  },
  "homepage": "https://github.com/glg/awesome-websocket",
  "_id": "awesome-websocket@0.0.25",
  "_shasum": "d84114e1caa3a30458e1658484c450e24659b599",
  "_from": "awesome-websocket@0.0.25"
}
